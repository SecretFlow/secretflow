// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/any.proto";
import "secretflow/ic/proto/common/header.proto";

package org.interconnection.v2;

message HandshakeVersionCheckHelper {
  int32 version = 1;
}

// [Sphinx doc begin anchor: HandshakeRequest]
// unified protocol for interconnection
message HandshakeRequest {
  // 握手请求版本号, 当前等于 2
  int32 version = 1;

  //** META INFO **//

  // The sender's rank
  int32 requester_rank = 2;

  //** AI/BI 算法层 **//

  // enum AlgoType
  repeated int32 supported_algos = 3;

  // 算法详细握手参数，与 supported_algos 一一对应
  // SS-LR：learning_rate，optimizer，normalize
  // ECDH-PSI：Nothing，skip
  repeated google.protobuf.Any algo_params = 4;

  //** 安全算子层 **//

  // AI/BI 算法所需的 op 列到此处
  // op = enum OpType
  // ECDH-PSI：Nothing，skip
  repeated int32 ops = 5;
  repeated google.protobuf.Any op_params = 6;

  //** 密码协议层 **//

  // protocol_family = enum ProtocolFamily
  //  SS: Protocol: [Semi2K, ABY3], FieldType, BeaverConfig, SerializeFormat
  //  ECC: Hash2Curve, EcGroup, SerializeFormat
  //  PHE: Protocol: [Paillier, EcElgamal], SerializeFormat
  repeated int32 protocol_families = 7;
  repeated google.protobuf.Any protocol_family_params = 8;

  //** 数据 IO **//

  // 定义 AI/BI 算法的输入和结果输出格式，不包括中间交互数据的格式
  // PSI: item_count、result_to_rank
  // SS-LR: sample_size、feature_num、has_label, etc.
  google.protobuf.Any io_param = 9;
}
// [Sphinx doc end anchor: HandshakeRequest]

// [Sphinx doc begin anchor: HandshakeResponse]
message HandshakeResponse {
  // response header
  ResponseHeader header = 1;

  //** AI/BI 算法层 **//

  // algos = enum AlgoType
  int32 algo = 2;

  // 算法详细握手参数
  // SS-LR：learning_rate，optimizer，normalize
  // ECDH-PSI：Nothing，skip
  google.protobuf.Any algo_param = 3;

  //** 安全算子层 **//

  // AI/BI 算法所需的 op 列到此处
  // op = enum OpType
  // ECDH-PSI：Nothing，skip
  repeated int32 ops = 4;
  repeated google.protobuf.Any op_params = 5;

  //** 密码协议层 **//

  // protocol_family = enum ProtocolFamily
  //  SS: Protocol: [Semi2K, ABY3], FieldType, BeaverConfig, SerializeFormat
  //  ECC: Hash2Curve, EcGroup, SerializeFormat
  //  PHE: Protocol: [Paillier, EcElgamal], SerializeFormat
  repeated int32 protocol_families = 6;
  repeated google.protobuf.Any protocol_family_params = 7;

  //** 数据 IO **//

  // 定义 AI/BI 算法的输入和结果输出格式，不包括中间交互数据的格式
  // PSI: item_count、result_to_rank
  // SS-LR: sample_size、feature_num、has_label, etc.
  google.protobuf.Any io_param = 8;
}
// [Sphinx doc end anchor: HandshakeResponse]

// [Sphinx doc begin anchor: AlgoType]
enum AlgoType {
  ALGO_TYPE_UNSPECIFIED = 0;
  ALGO_TYPE_ECDH_PSI = 1;
  ALGO_TYPE_SS_LR = 2;
  ALGO_TYPE_SGB = 3;
}
// [Sphinx doc end anchor: AlgoType]

// [Sphinx doc begin anchor: OpType]
enum OpType {
  OP_TYPE_UNSPECIFIED = 0;
  OP_TYPE_SIGMOID = 1;
}
// [Sphinx doc end anchor: OpType]

// [Sphinx doc begin anchor: ProtocolFamily]
enum ProtocolFamily {
  PROTOCOL_FAMILY_UNSPECIFIED = 0;
  PROTOCOL_FAMILY_ECC = 1;
  PROTOCOL_FAMILY_SS = 2;
  PROTOCOL_FAMILY_PHE = 3;
}
// [Sphinx doc end anchor: ProtocolFamily]
