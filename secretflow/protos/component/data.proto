// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package secretflow.component;

import "google/protobuf/any.proto";

import "secretflow/protos/component/cluster.proto";

// Describe the application related to data.
// - SCQL, GRM related meta information should be here.
// - You can add more field here, when another application is added.
message SystemInfo {
  // The application name.
  // Supported: `secretflow`
  string app_name = 1;

  // For secretflow.
  SFClusterDesc secretflow = 2;
}

// The schema of a table.
// - A col must be one of `id | feature | label`. By default, it should be a
// feature.
// - All names must match the regexp `[A-Za-z0-9.][A-Za-z0-9_>./]*`.
// - All data type must be one of
// `component.data_utils.SUPPORTED_VTABLE_DATA_TYPE`, including
//  `i8 | i16 | i32 | i64 | u8 | u16 | u32 | u64 | f16 | f32 | f64 | str`.
message TableSchema {
  // Id column name(s).
  // Optional, can be empty.
  repeated string ids = 1;

  // Feature column name(s).
  repeated string features = 2;

  // Label column name(s).
  // Optional, can be empty.
  repeated string labels = 3;

  // Id column data type(s).
  // Len(id) should match len(id_types).
  repeated string id_types = 4;

  // Feature column data type(s).
  // Len(features) should match len(feature_types).
  repeated string feature_types = 5;

  // Label column data type(s).
  // Len(labels) should match len(label_types).
  repeated string label_types = 6;
}

// VerticalTable describes a vertical virtual table from multiple parties.
// > TODO: move this to secretflow/protos/builtin/
//
// > Guide: if some type is only required to be handle inside a specific system,
// for instance woe.rule file in engine, we don't need to define a new type
// here.
message VerticalTable {
  // The vertical partitioned slices' schema.
  // Must match data_refs in the parent DistData message.
  repeated TableSchema schemas = 1;

  // If -1, the number is unknown.
  int64 num_lines = 2;
}

// IndividualTable describes a table owned by a single party.
message IndividualTable {
  TableSchema schema = 1;

  // If -1, the number is unknown.
  int64 num_lines = 2;
}

// Descibes public storage info for a collection of Device Objects.
message DeviceObjectCollection {
  message DeviceObject {
    // Supported: `spu \| pyu`
    string type = 1;
    // Index of data_ref in the parent DistData message.
    repeated int32 data_ref_idxs = 2;
  }

  repeated DeviceObject objs = 1;

  // Any public information.
  string public_info = 2;
}

// A public record for a general distributed data.
//
// The type of this distributed data, should be meaningful to components.
//
// The concrete data format (include public and private parts) is defined by
// other protos.
//
// Suggested names, i.e.
// - sf.table.vertical_table      represent a secretflow vertical table
// - sf.model.*                   represent a secretflow models.
// - sf.rule.*                    represent a secretflow rules.
message DistData {
  // The name of this distributed data.
  string name = 1;

  string type = 2;

  // Describe the system information that used to generate this distributed
  // data.
  SystemInfo sys_info = 3;

  // Public information, known to all parties.
  // i.e. VerticalTable
  google.protobuf.Any meta = 4;

  // A reference to a data that is stored in the remote path.
  message DataRef {
    // The path information relative to StorageConfig of the party.
    string uri = 1;

    // The owner party.
    string party = 2;

    // The storage format, i.e. csv.
    string format = 3;
  }

  // Remote data references.
  repeated DataRef data_refs = 5;
}
