// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package secretflow.component;

import "google/protobuf/any.proto";

import "secretflow/protos/component/cluster.proto";

message SystemInfo {
  // The application name. i.e. Secretflow/SCQL etc.
  string app_name = 1;

  // Only valid when app_name is Secretflow.
  SFClusterDesc secretflow = 2;

  // SCQL, GRM related meta information should be here.
  // You can add more field here, when a new type of application is added.
}

// Consider the follow pipeline defintion.
//
//          |   |              |    |
//       +--+---+--+        +--+----+--+
//       | SF.Comp |        |SCQL.Query|
//       +----+----+        +-----+----+
//            |                   |
//            +------+    +-------+
//                   |    |
//               +---+----+----+
//               |  SF.Comp1   |
//               +------+------+
//                      |
//
// There are only two kind a concept:
// - node: represent a processing step of data.
// - edge: represent data.
//
// This module tries to use one definition to describe all types of data.
//
// Goal:
// - define a cross-platform distributed data definition.
// Non-goal:
// - define concrete data type and format.
// - define concrete storage type.
message DistData {
  // The name of this distributed data.
  string name = 1;

  // The type of this distributed data, should be meanful to components.
  // The concreate data format (include public and private part) is defined by
  // other protos.
  //
  // Suggested names, i.e.
  // - sf.data.VTable      represent a secretflow table, used by
  // - sf.data.model.SSLR  represent a secretflow SSLR model.
  string type = 2;

  // Describe the system information that used to generate this distributed
  // data.
  SystemInfo sysinfo = 3;

  // Public information, known to all parties.
  // i.e. secretflow.protos.VTable
  google.protobuf.Any meta = 4;

  // A reference to a data that is stored in the remote path.
  message DataRef {
    // The path infomation.
    string uri = 1;

    // The party's id, or storage id.
    string party = 2;
  }

  // Remote data references. The concrete data is private to parties, this
  // field only contain a reference to them.
  repeated DataRef data_refs = 5;
}

// First-party Data Types.
// Used to fill in meta in DistData.

// Table describes a vertical virtual table from multiple-parties.
// TODO: move this to secretflow/protos/builtin/
// TODO: add more builtin data type support.
// Guide: if some type is only required to be handle inside a specific system,
// for instance woe.rule file in engine, we dont need to define a new type here.
message VTable {
  message Slice {
    // TODO(jint) define this, for instance.
    // ['i8', 'i32', 'f32', ...]
    repeated string types = 1;

    // The header names.
    // - If not empry, len(headers) should match len(types), element type
    //   must match the regexp "[A-Za-z0-9.][A-Za-z0-9_>./]*".
    // - If empty, we assume header does not contain data.
    repeated string headers = 2;
  }

  // The virtical splitted slices.
  repeated Slice slices = 1;

  // If -1, the number is unknown, else the number of lines.
  int64 num_lines = 2;

  // the storage format, i.e. csv.
  string format = 3;
}
