// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// NOTE: this file is still experimental.

syntax = "proto3";

package secretflow.component;

enum AtomicParameterType {
  APT_UNDEFINED = 0;
  APT_FLOAT = 1;
  APT_INT = 2;
  APT_STRING = 3;
  APT_BOOL = 4;

  // lists
  APT_FLOATS = 5;
  APT_INTS = 6;
  APT_STRINGS = 7;
  APT_BOOLS = 8;
}

message AtomicParameter {
  float f = 1;  // FLOAT
  // NOTE(junfeng): "is" is preserved by python. Replaced with "i64".
  int64 i64 = 2;  // INT
  string s = 3;   // STRING
  bool b = 4;     // BOOL

  // lists
  repeated float fs = 5;    // FLOATS
  repeated int64 i64s = 6;  // INTS
  repeated string ss = 7;   // STRINGS
  repeated bool bs = 8;     // BOOLS
}

// Extras for atomic paramater node.
message AtomicParameterDef {
  AtomicParameterType type = 1;

  /// Only valid when type is {FLOATS, INTS, STRINGS, BOOLS}
  int64 list_min_lenth_inclusive = 2;
  // if -1 means unlimited.
  int64 list_max_length_inclusive = 3;

  bool is_optional = 4;
  // A reasonable default for this attribute if the user does not supply
  // a value.  If not specified, the user must supply a value.
  // only valid if is_optional is true.
  AtomicParameter default_value = 5;

  /// Only valid when type is {FLOAT, INT, STRING}
  // Please use list fields of AtomicParameter, i.e. ss, is, fs
  // If type is list, allowed_values is applied to each element.
  AtomicParameter allowed_values = 6;

  /// Only valid when type is {FLOAT, INT}
  // If type is list, allowed_values is applied to each element.
  bool has_lower_bound = 7;
  AtomicParameter lower_bound = 8;
  bool lower_bound_inclusive = 9;
  bool has_upper_bound = 10;
  AtomicParameter upper_bound = 11;
  bool upper_bound_inclusive = 12;
}

// Extras for union paramater node.
message ParameterUnionDef {
  // name of default selected child.
  string default_selection = 1;
}

enum ParameterNodeType {
  PNT_UNDEFINED = 0;
  // The leaf of the tree.
  ATOMIC = 1;
  // Struct node means only one of its children is required to fill.
  UNION = 2;
  // Union node means its children are required to fill together.
  STRUCT = 3;
}

// A Node of Parameter Tree.
message ParameterNode {
  // indicates the ancestors of a node.
  // e.g. [name_a, name_b, name_c]
  // means the path of current ParameterNode is
  // name_a/name_b/name_c/current_node
  // only ^[a-zA-Z0-9_.-]*$ is allowed.
  repeated string prefixes = 1;

  // must be uniqe in the same level just like linux file systems.
  // only ^[a-zA-Z0-9_.-]*$ is allowed.
  string name = 2;

  // md is accepted.
  string doc_string = 3;

  ParameterNodeType type = 4;

  // required for ATOMIC
  AtomicParameterDef atomic = 5;

  // required for UNION
  ParameterUnionDef union = 6;
}

enum TableType {
  TABLE_TYPE_INVALID = 0;

  // dataframe-like data from a single party.
  INDIVIDUAL_TABLE = 1;

  // vertical partitioning dataframe-like data from multiple parties.
  // each party contains the same number of rows.
  VERTICAL_PARTITIONING_TABLE = 2;

  // horizonal partitioning dataframe-like data from multiple parties.
  // each party shares the same schema.
  HORIZONTAL_PARTITIONING_TABLE = 3;
}

enum ColDataType {
  CDT_UNDEFINED = 0;
  CDT_FLOAT = 1;
  CDT_INT = 2;
  CDT_STRING = 3;
  CDT_BOOL = 4;
}

message TableDef {
  message ColParameterDef {
    // unique among all ColAttrDef of a TableAttrDef.
    string name = 1;

    // md is accepted.
    string doc_string = 2;

    // accepted col data types.
    repeated ColDataType data_types = 3;

    // inclusive
    int64 col_list_min_cnt = 4;
    int64 col_list_max_cnt = 5;

    // required for COLS_WITH_PARAMS
    ParameterNode params = 6;
  }

  repeated ColParameterDef cols = 1;

  // accepted table types.
  // if not given, all kind of table would be accepted.
  repeated TableType types = 2;
}

message ModelDef {
  // accepted model types.
  // if not given, all kind of models would be accepted.
  // e.g. "SSLR_MODEL", "XGB_MODEL", "SGB_MODEL"
  repeated string types = 2;
}

message RuleDef {
  // accepted rule types.
  // if not given, all kind of rules would be accepted.
  // e.g. "WOE_BINNING_RULE", "SCORE_CARD_RULE"
  repeated string types = 2;
}

enum SFDataType {
  DT_UNDEFINED = 0;
  TABLE = 1;
  MODEL = 2;
  RULE = 3;
  REPORT = 4;
}

message IoDef {
  message SFDataDef {
    SFDataType type = 1;

    // required for TABLE
    TableDef table = 2;

    // required for MODEL
    ModelDef model = 3;

    // required for RULE
    RuleDef rule = 4;
  }
  // should be unique among all IOs.
  string name = 1;

  // md is accepted.
  string doc_string = 2;

  // an input could accpet multple SF Data
  repeated SFDataDef data = 3;
}

// The definition of a comp.
message ComponentDef {
  // namespace of the comp.
  string domain = 1;

  // should be unique among all comps of the same domain.
  string name = 2;

  // md is accepted.
  string doc_string = 3;

  // version of the comp.
  string version = 4;

  repeated ParameterNode params = 5;

  repeated IoDef inputs = 6;

  repeated IoDef outputs = 7;
}

message CompListDef {
  string name = 1;

  string doc_string = 2;

  string version = 3;

  repeated ComponentDef comps = 4;
}
