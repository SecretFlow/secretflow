// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package org.interconnection.v2.runtime;

message DataExchangeProtocol {
  // enum ScalarType
  int32 scalar_type = 1;

  // if scalar_type is SCALAR_TYPE_OBJECT, please put real type name here
  // otherwise this field is optional
  string scalar_type_name = 2;

  oneof container {
    // Store single scalar or single object
    Scalar scalar = 5;

    // List, F means the size of each element is fixed and V means variant
    FScalarList f_scalar_list = 6;
    VScalarList v_scalar_list = 7;

    // Ndarray, F means the size of each element is fixed and V means variant
    FNdArray f_ndarray = 8;
    VNdArray v_ndarray = 9;

    // List of ndarray
    // F means the size of each element is fixed and V means variant
    FNdArrayList f_ndarray_list = 10;
    VNdArrayList v_ndarray_list = 11;
  }
}

enum ScalarType {
  SCALAR_TYPE_UNSPECIFIED = 0;
  SCALAR_TYPE_BOOL = 1;
  SCALAR_TYPE_INT8 = 2;
  SCALAR_TYPE_UINT8 = 3;
  SCALAR_TYPE_INT16 = 4;
  SCALAR_TYPE_UINT16 = 5;
  SCALAR_TYPE_INT32 = 6;
  SCALAR_TYPE_UINT32 = 7;
  SCALAR_TYPE_INT64 = 8;
  SCALAR_TYPE_UINT64 = 9;
  SCALAR_TYPE_INT128 = 10;
  SCALAR_TYPE_UINT128 = 11;

  SCALAR_TYPE_FLOAT16 = 15;
  SCALAR_TYPE_FLOAT32 = 16;
  SCALAR_TYPE_FLOAT64 = 17;

  SCALAR_TYPE_OBJECT = 20;
}

message Scalar {
  bytes buf = 1;
}

// Fixed-length scalar list
// the items in this list are all same size
message FScalarList {
  // The size of each item is item_buf.len / item_count
  int64 item_count = 1;
  bytes item_buf = 2;
}

// variant length scalar list
// variant length means that the length of each serialized element is not equal.
message VScalarList {
  repeated bytes items = 1;
}

message FNdArray {
  // The size of each item is item_buf.len / total_item, where total_item count
  // can get from shape
  repeated int64 shape = 1;
  bytes item_buf = 2;
}

message VNdArray {
  repeated int64 shape = 1;
  repeated bytes items = 2;
}

// List of ndarray
message FNdArrayList {
  repeated FNdArray ndarrays = 1;
}

message VNdArrayList {
  repeated VNdArray ndarrays = 1;
}
